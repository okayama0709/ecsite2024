---
import goods from "../data/goods.json";

// console.log(goods);
// 重複しないブランドリストを抽出
const brands = [...new Set(goods.flatMap(item => item.bland))];
console.log(brands);
---


<ul id="brand-list">
    <li data-brand="すべて">すべて</li>
    {brands.map(brand => (
      <li key={brand} data-brand={brand}>{brand}</li>
    ))}
</ul>

  <ul id="goods-list">
    {goods.map(list => (
      <li key={list.id} class="goods-item" data-brand={Array.isArray(list.bland) ? list.bland.join(' ') : list.bland}>
        <a href={`goods/${list.url}`}>
          <div class="imgBox">
            <img src={`/05_ecsite/images/${list.itemphotos[0]}`} />
          </div>
          <h3 class="title">{list.name}</h3>
          {list.state ? (
            <p class="price">{list.price}</p>
          ) : (
            <p class="price red">SOLD OUT</p>
          )}
        </a>
      </li>
    ))}
</ul>
<script>
  function filterGoodsByBrand(brand) {
    const items = document.querySelectorAll(".goods-item");
    items.forEach((item) => {
      const itemBrands = item.getAttribute('data-brand').split(' ');
      if (brand === "すべて" || itemBrands.includes(brand)) {
        item.classList.remove("hidden");
      } else {
        item.classList.add("hidden");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const brandElements = document.querySelectorAll("#brand-list li");
    brandElements.forEach((element) => {
      element.addEventListener("click", () => {
        const brand = element.getAttribute("data-brand");
        filterGoodsByBrand(brand);
      });
    });
  });
</script>

<style lang="scss">

  .red{
    color: red;
  }
   $breakpoints: (
    'sm': 'screen and (min-width: 576px)',
    'md': 'screen and (min-width: 768px)',
    'lg': 'screen and (min-width: 992px)',
    'xl': 'screen and (min-width: 1200px)',
) !default;

@mixin media($breakpoint) {
    @media #{map-get($breakpoints, $breakpoint)} {
        @content;
    }
}
ul:nth-child(1) {
  cursor: pointer;
display: grid;
grid-template-columns: repeat(3, 1fr);
grid-template-rows: repeat(1, 1fr);
grid-column-gap: 0px;
grid-row-gap: 0px;
padding: 0;
margin: 0;
  @include media('md') {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
  }
  li {
    font-size: .8em;
    display: flex;
    align-items: center;
    height: fit-content;
    padding: 10px;
    border:0.1px solid #d9d7d7;
    &:hover{
   background-color: rgba(255, 255, 255, .3);
  }}
}
ul:nth-child(2) {
display: grid;
grid-template-columns: repeat(2, 1fr);
grid-template-rows: repeat(4, 1fr);
grid-column-gap: 0px;
grid-row-gap: 0px;
padding: 0;
margin: 0;
  @include media('md') {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
  }
  li {
    display: flex;
    align-items: center;
    height:   100%;
    padding: 20px;
    border:0.1px solid #d9d7d7;
    &:hover{
   background-color: rgba(255, 255, 255, .3);
  }
    &:nth-child(9){
    @include media('md') {
      display: none
    }
 }
    a {
      display: block;
      text-decoration: none;
      color: #000;
      .imgBox {
        width: 100%;
        height: auto;
      aspect-ratio: 1/1;
        overflow: hidden;
        margin-bottom: 1em;
      }
      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      .price{
        font-size: 12px;
        margin-bottom: .5em;
        width: fit-content;
        &::after{
          content: "（税込）";
          font-size: .7em;
          font-weight:300;
        }
      }
      .title{
        font-size: 13px;
        margin-bottom: .1em;
      }
    }
  }
}

 .hidden {
  display: none !important;
}

</style>